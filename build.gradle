plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.7'
}


group = 'com.example'
version = '0.0.1-SNAPSHOT'
description = 'StorySpeak JSP AI'
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url = 'https://repo.spring.io/snapshot' }

}

ext {
    set('springAiVersion', "1.0.2")
}

dependencies {
    // ✅ Spring Web + JSP
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
    implementation 'jakarta.servlet:jakarta.servlet-api'
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api'
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl'

    // ✅ Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // ✅ 개발 편의
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // ✅ Spring AI (선택적 사용 — REST 호출 병행 가능)
    implementation 'org.springframework.ai:spring-ai-starter-model-openai'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.ai:spring-ai-starter-vector-store-pgvector'
    implementation 'org.springframework.ai:spring-ai-pdf-document-reader'
    implementation 'org.springframework.ai:spring-ai-tika-document-reader'
    implementation 'org.springframework.ai:spring-ai-jsoup-document-reader'
    implementation 'org.springframework.ai:spring-ai-advisors-vector-store'
    implementation 'org.springframework.ai:spring-ai-rag'

    // ✅ Properties Encryption (Jasypt)
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3'

    // ✅ DB (선택)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // ✅ 테스트
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'io.projectreactor:reactor-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('processResources') {
    // ✅ keystore.p12 중복 복사 방지 + 리소스 포함
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from('src/main/resources') {
        include '**/*.p12'
    }
}
